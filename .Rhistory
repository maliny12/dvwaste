sighting <- ggplot() +
geom_sf(data=AUS_SA2_shp) +
geom_point(data = season, aes(x = decimalLongitude,
y = decimalLatitude,
color = season)) +
coord_sf(ylim = c(-25, -9)) +
facet_wrap(~ season) +
ggtitle("Distribution of wild Gouldiae sighting, based on season.") +
theme_classic()
ggplotly(sighting)
sighting <- ggplot() +
geom_sf(data=AUS_SA2_shp) +
geom_point(data = season, aes(x = decimalLongitude,
y = decimalLatitude,
color = season)) +
coord_sf(ylim = c(-25, -9)) +
facet_wrap(~ season) +
ggtitle("Distribution of wild Gouldiae sighting, based on season.") +
theme_classic()
sighting
bar_chart <- ggplot(top_five_sightings,
aes(x = reorder(dataResourceName, -total_sightings),
y = total_sightings,
text = paste("Data Resource",dataResourceName, "<br>",
"Total Sightings", total_sightings))) +
geom_bar(stat = "identity", fill = "#87CEEB") +
theme(axis.text.x = element_text( hjust = 1)) +
labs(
title = "Top Five Data Resources with Gouldiae Sightings",
x = "Data Resource",
y = "Total Sightings"
) +
scale_x_discrete(labels = function(x) str_wrap(x, width = 10)) +
theme_classic()
ggplotly(bar_chart)
bar_chart <- ggplot(top_five_sightings,
aes(x = reorder(dataResourceName, -total_sightings),
y = total_sightings,
text = paste("Data Resource: ",dataResourceName, "<br>",
"Total Sightings: ", total_sightings))) +
geom_bar(stat = "identity", fill = "#87CEEB") +
theme(axis.text.x = element_text( hjust = 1)) +
labs(
title = "Top Five Data Resources with Gouldiae Sightings",
x = "Data Resource",
y = "Total Sightings"
) +
scale_x_discrete(labels = function(x) str_wrap(x, width = 10)) +
theme_classic()
ggplotly(bar_chart, tooltip = "text")
kable(chloebia_basic_descriptions, format = "markdown")
kableExtra::kable(chloebia_basic_descriptions, format = "markdown")
kableExtra::kable(chloebia_assert_descriptions, format = "markdown")
chloebia_assert_descriptions <- data.frame(
Variable = c("BASIS_OF_RECORD_INVALID"),
Description = c(
"Contain information on the status of the record."
)
)
kableExtra::kable(chloebia_assert_descriptions, format = "markdown")
use_cc0_license()
library(usethis)
use_cc0_license()
use_mit_license()
use_mit_license()
use_cc0_license()
library(dvwaste)
use_cc0_license()
use_mit_license()
dvwaste::run_app()
runApp('inst/shinyapp')
library(dvwaste)
devtools::document()
library(dvwaste)
.rs.restartR()
devtools::document()
.rs.restartR()
library(dvwaste)
devtools::document()
.rs.restartR()
devtools::document()
.rs.restartR()
devtools::document()
.rs.restartR()
library(dvwaste)
devtools::document()
devtools::load_all()
devtools::install()
.rs.restartR()
devtools::document()
devtools::load_all()
devtools::install()
pkgdown::build_site()
dim(waste_gdp_10)
glimpse(waste_gdp_10)
dim(mismanaged_gdp_10)
glimpse(mismanaged_gdp_10)
dim(coast_waste_10)
glimpse(coast_waste_10)
dim(global_plastic_waste)
.rs.restartR()
devtools::document()
devtools::load_all()
devtools::install()
??dvwaste
dvwaste::
dvwaste
devtools::document()
devtools::load_all()
devtools::install()
??dvwaste::run_app
factor_input <- factor(c("A", "B", "A", "C", "B"))
descriptive_stats(factor_input)
library(dvwaste)
.rs.restartR()
devtools::document()
devtools::load_all()
devtools::install()
??dvwaste::descriptive_stats
shiny::runApp('inst/shinyapp')
devtools::document()
devtools::load_all()
devtools::install()
.rs.restartR()
devtools::document()
devtools::load_all()
devtools::install()
library(tidyverse)
library(dvwaste)
head(dvwaste::coast_waste_10)
glimpse(coast_waste_10)
glimpse(waste_gdp_10)
head(mismanaged_vs_gdp.csv)
head(mismanaged_vs_gdp)
head(mismanaged_gdp_10)
head(mismanaged_gdp_10)
glimpse(mismanaged_gdp_10)
head(global_plastic_waste)
glimpse(global_plastic_waste)
########## Load Library ##########
library(ggplot2) # For plots
library(tidyverse)
library(ggpattern)
library(sp) # For maptools package
library(broom) # For tidying the data
library(knitr) # for Kable function
library(dvwaste)
library(plotly)
# Format the data
coast_waste_10 <- coast_waste_10 %>%
rename("region"= Entity,
"value" = `Mismanaged plastic waste (tonnes)`)
# Load the Waste_vs_gdp data
# This data is per-capital plastic waste
waste_gdp_10 <- waste_gdp_10  %>%
rename("region"= Entity,
"value" = `Per capita plastic waste (kilograms per person per day)`)
# Load the mismanaged_vs_gdp
# This data is per-capital mismanaged wasted
mismanaged_gdp_10 <- mismanaged_gdp_10 %>% # Keep only the relevant columns
rename("region"= Entity,
"value" = `Per capita mismanaged plastic waste (kilograms per person per day)`)
# Load the world map data
world <- maps::map("world", fill=TRUE, plot=FALSE) %>%
maptools::pruneMap(xlim = c(-180,180), ylim = c(-60, 90)) %>%
tidy()
# Join Coast_vs_waste data with the WorldMap data
sub_map <- left_join(world , waste_gdp_10 , "region")
#sub_map <- highlight_key(sub_map, ~region)
heatmap <- ggplot(sub_map, tooltip = "text") +
geom_polygon(color = "#f2f2f2", size = 0.3,aes(x = long, y = lat,
fill = value, group = group,
text = paste(region, "<br>", value, "tons"))) +
scale_fill_continuous(low="skyblue", high="royalblue", trans = "sqrt",
guide="colorbar", na.value = "#909090") +
theme(panel.background = element_rect(fill="#3f3f3f"),
axis.line=element_blank(),
axis.text.x=element_blank(),
axis.text.y=element_blank(),axis.ticks=element_blank(),
axis.title.x=element_blank(),
axis.title.y=element_blank(),
#panel.border = element_rect(colour = "black", fill=NA, size=3),
panel.grid.major=element_blank(),
panel.grid.minor=element_blank(),
title = element_text(colour = "white"),
legend.title = element_text(size=10, color = "white"),
legend.text=element_text(color = "white") ) +
labs(fill="Kgs", title= "Per capita plastic waste (kilograms per person per day), in 2010.",
subtitle = "The heatmap illustrates the distribution of plastic waste produced
per capita by each country in the year 2010.") +
coord_sf()
# Create a plotly version of the heatmap
heatmap_plotly <- ggplotly(heatmap, tooltip = "text")
# Display the heatmap
heatmap_plotly
barchart <- ggplot(mismanged_waste_10,
aes(
x = fct_reorder(region,value),
y= value,
fill = region,
text = paste(region, "<br>", value, "tons")
)
) +
geom_col() +
labs(x = " ", y = "",
title = "Top 10 countries that produced the most mismanaged plastic waste (tons), in 2010.",
subtitle = "This bar chart highlights the leading contributors to mismanaged plastic waste in 2010.") +
coord_flip()+
scale_fill_brewer(palette = "GnBu", direction = -1) +
theme_classic()
barchart <- ggplot(coast_waste_10,
aes(
x = fct_reorder(region,value),
y= value,
fill = region,
text = paste(region, "<br>", value, "tons")
)
) +
geom_col() +
labs(x = " ", y = "",
title = "Top 10 countries that produced the most mismanaged plastic waste (tons), in 2010.",
subtitle = "This bar chart highlights the leading contributors to mismanaged plastic waste in 2010.") +
coord_flip()+
scale_fill_brewer(palette = "GnBu", direction = -1) +
theme_classic()
plot_no_legend <- barchart + theme(legend.position="none",
axis.text.x=element_text(colour="white"),
axis.text.y=element_text(colour="white"),
title = element_text(colour = "white",
size=9),
axis.line= element_line(colour="white"),
axis.ticks = element_line(colour="white"))
barchart_plotly <- ggplotly(plot_no_legend, tooltip = "text") %>%
layout(autosize = F, width = 800, height = 400)
barchart_plotly
top10_mismanged <- coast_waste_10 %>%
arrange(-value)%>%
head(10)
barchart <- ggplot(top10_mismanged,
aes(
x = fct_reorder(region,value),
y= value,
fill = region,
text = paste(region, "<br>", value, "tons")
)
) +
geom_col() +
labs(x = " ", y = "",
title = "Top 10 countries that produced the most mismanaged plastic waste (tons), in 2010.",
subtitle = "This bar chart highlights the leading contributors to mismanaged plastic waste in 2010.") +
coord_flip()+
scale_fill_brewer(palette = "GnBu", direction = -1) +
theme_classic()
plot_no_legend <- barchart + theme(legend.position="none",
axis.text.x=element_text(colour="white"),
axis.text.y=element_text(colour="white"),
title = element_text(colour = "white",
size=9),
axis.line= element_line(colour="white"),
axis.ticks = element_line(colour="white"))
barchart_plotly <- ggplotly(plot_no_legend, tooltip = "text") %>%
layout(autosize = F, width = 800, height = 400)
barchart_plotly
top10_mismanged <- coast_waste_10 %>%
arrange(-value)%>%
head(10)
barchart <- ggplot(top10_mismanged,
aes(
x = fct_reorder(region,value),
y= value,
fill = region,
text = paste(region, "<br>", value, "tons")
)
) +
geom_col() +
labs(x = " ", y = "",
title = "Top 10 countries that produced the most mismanaged plastic waste (tons), in 2010.",
subtitle = "This bar chart highlights the leading contributors to mismanaged plastic waste in 2010.") +
coord_flip()+
scale_fill_brewer(palette = "GnBu", direction = -1) +
theme_classic()
plot_no_legend <- barchart + theme(legend.position="none",
title = element_text(size=9))
barchart_plotly <- ggplotly(plot_no_legend, tooltip = "text") %>%
layout(autosize = F, width = 800, height = 400)
barchart_plotly
# Join Coast_vs_waste data with the WorldMap data
sub_map <- left_join(world , waste_gdp_10 , "region")
#sub_map <- highlight_key(sub_map, ~region)
heatmap <- ggplot(sub_map, tooltip = "text") +
geom_polygon(color = "#f2f2f2", size = 0.3,aes(x = long, y = lat,
fill = value, group = group,
text = paste(region, "<br>", value, "tons"))) +
scale_fill_continuous(low="skyblue", high="royalblue", trans = "sqrt",
guide="colorbar", na.value = "#909090") +
theme(panel.background = element_rect(fill= 'transparent'),
axis.line=element_blank(),
axis.text.x=element_blank(),
axis.text.y=element_blank(),axis.ticks=element_blank(),
axis.title.x=element_blank(),
axis.title.y=element_blank(),
#panel.border = element_rect(colour = "black", fill=NA, size=3),
panel.grid.major=element_blank(),
panel.grid.minor=element_blank(),
title = element_text(colour = "white"),
legend.title = element_text(size=10, color = "white"),
legend.text=element_text(color = "white") ) +
labs(fill="Kgs", title= "Per capita plastic waste (kilograms per person per day), in 2010.",
subtitle = "The heatmap illustrates the distribution of plastic waste produced
per capita by each country in the year 2010.") +
coord_sf()
# Create a plotly version of the heatmap
heatmap_plotly <- ggplotly(heatmap, tooltip = "text")
# Display the heatmap
heatmap_plotly
# Join Coast_vs_waste data with the WorldMap data
sub_map <- left_join(world , waste_gdp_10 , "region")
#sub_map <- highlight_key(sub_map, ~region)
heatmap <- ggplot(sub_map, tooltip = "text") +
geom_polygon(color = "#f2f2f2", size = 0.3,aes(x = long, y = lat,
fill = value, group = group,
text = paste(region, "<br>", value, "tons"))) +
scale_fill_continuous(low="skyblue", high="royalblue", trans = "sqrt",
guide="colorbar", na.value = "#909090") +
theme(panel.background = element_rect(fill= 'transparent'),
axis.line=element_blank(),
axis.text.x=element_blank(),
axis.text.y=element_blank(),axis.ticks=element_blank(),
axis.title.x=element_blank(),
axis.title.y=element_blank(),
#panel.border = element_rect(colour = "black", fill=NA, size=3),
panel.grid.major=element_blank(),
panel.grid.minor=element_blank(),
legend.title = element_text(size=10),) +
labs(fill="Kgs", title= "Per capita plastic waste (kilograms per person per day), in 2010.",
subtitle = "The heatmap illustrates the distribution of plastic waste produced
per capita by each country in the year 2010.") +
coord_sf()
# Create a plotly version of the heatmap
heatmap_plotly <- ggplotly(heatmap, tooltip = "text")
# Display the heatmap
heatmap_plotly
# Join Coast_vs_waste data with the WorldMap data
sub_map <- left_join(world , waste_gdp_10 , "region")
#sub_map <- highlight_key(sub_map, ~region)
heatmap <- ggplot(sub_map, tooltip = "text") +
geom_polygon(color = "#f2f2f2", size = 0.3,aes(x = long, y = lat,
fill = value, group = group,
text = paste(region, "<br>", value, "kgs"))) +
scale_fill_continuous(low="skyblue", high="royalblue", trans = "sqrt",
guide="colorbar", na.value = "#909090") +
theme(panel.background = element_rect(fill= 'transparent'),
axis.line=element_blank(),
axis.text.x=element_blank(),
axis.text.y=element_blank(),axis.ticks=element_blank(),
axis.title.x=element_blank(),
axis.title.y=element_blank(),
#panel.border = element_rect(colour = "black", fill=NA, size=3),
panel.grid.major=element_blank(),
panel.grid.minor=element_blank(),
legend.title = element_text(size=10),) +
labs(fill="Kgs", title= "Per capita plastic waste (kilograms per person per day), in 2010.",
subtitle = "The heatmap illustrates the distribution of plastic waste produced
per capita by each country in the year 2010.") +
coord_sf()
# Create a plotly version of the heatmap
heatmap_plotly <- ggplotly(heatmap, tooltip = "text")
# Display the heatmap
heatmap_plotly
usethis::use_vignette(name = "funtions_vignette", title = "Fvailable Functions")
citation("tidyverse")
citation("R")
citation("ggplot2")
citation("ggpatern")
citation("ggpattern")
citation("plotly")
citation("sp")
citation("broom")
citation("shiny")
citation("mapproj")
library(tidyverse)
library(dvwaste)
library(tidyverse)
library(dvwaste)
# select multiple countries
input_countries <- c("Bahamas", "Australia", "United States")
param_barchart(input_countries)
# Use default country_list value, return a table with all countries
param_barchart()
.rs.restartR()
devtools::document()
devtools::load_all()
devtools::install()
library(tidyverse)
param_barchart <- function(country_list = character(0)) {
# Cross check with
valid_elem <- unique(coast_waste_10$Entity)
invalid_elem <- setdiff(country_list, valid_elem)
if (length(invalid_elem) > 0 ) {
return(paste("Invalid countries: ", paste(invalid_elem, collapse = ", ")))
}
if (length(country_list) == 0) {
# Make a new dataset containing all the countries
tibble <- coast_waste_10 %>%
select(Entity, `Mismanaged plastic waste (tonnes)`) %>%
as_tibble()
return(tibble)
}
if (length(country_list) > 0) {
# Make a new dataset containing only the countries users want to see
tibble <- coast_waste_10 %>%
filter(coast_waste_10$Entity %in% country_list)  %>%
select(Entity, `Mismanaged plastic waste (tonnes)`) %>%
as_tibble()
return(tibble)
}
}
param_barchart()
input_countries <- c("Bahamas", "Australia", "United States")
library(tidyverse)
library(dvwaste)
library(tidyverse)
library(dvwaste)
# select multiple countries
input_countries <- c("Bahamas", "Australia", "United States")
param_barchart(input_countries)
# Use default country_list value, return a table with all countries
param_barchart()
library(dvwaste)
library(tidyverse)
library(dvwaste)
library(tidyverse)
library(dvwaste)
# select multiple countries
input_countries <- c("Bahamas", "Australia", "United States")
param_barchart(input_countries)
# Use default country_list value, return a table with all countries
param_barchart()
library(dvwaste)
.rs.restartR()
devtools::document()
.rs.restartR()
devtools::load_all()
.rs.restartR()
devtools::document()
rm(list = c("param_barchart"))
devtools::document()
devtools::load_all()
devtools::install()
devtools::check()
dvwaste::coast_waste_10
dvwaste::coast_waste_10$Entity
input_countries <- c("Bahamas", "Australia", "United States")
param_barchart(input_countries)
.rs.restartR()
devtools::document()
devtools::load_all()
devtools::install()
.rs.restartR()
devtools::document()
devtools::load_all()
devtools::install()
pkgdown::build_site()
devtools::document()
devtools::load_all()
devtools::install()
pkgdown::build_site()
.rs.restartR()
devtools::document()
devtools::load_all()
devtools::install()
pkgdown::build_site()
devtools::document()
devtools::load_all()
devtools::install()
pkgdown::build_site()
shiny::runApp('inst/shinyapp')
.rs.restartR()
devtools::document()
devtools::load_all()
devtools::install()
pkgdown::build_site()
dvwaste::coast_waste_10
dvwaste::descriptive_stats()
x <- c(1,2,4,3,3,553354,32,4,4453)
dvwaste::descriptive_stats(x)
dvwaste::param_barchart()
country <- c("Cambodia", "Vietnam")
dvwaste::param_barchart(country)
dvwaste::waste_gdp_10
dvwaste::run_app()
devtools::load_all()
devtools::install()
pkgdown::build_site()
devtools::document()
devtools::install()
library(dvwaste)
?dvwaste
??dvwaste
usethis::use_package_doc()
devtools::document()
??dvwaste
devtools::document()
devtools::install()
devtools::load_all()
library(package)
library(dvwaste)
?dvwaste
??dvwaste
library(dvwaste)
devtools::load_all()
dvwaste::run_app()
